#!/bin/bash
#
# –ü–æ–∏—Å–∫–æ–≤–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ Telegram
# Copyright (c) –ì—É—Ä—å–µ–≤ –ù–∏–∫–æ–ª–∞–π, 2017
#
# –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º: –í—ã –º–æ–∂–µ—Ç–µ
# —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –µ—ë –∏ (–∏–ª–∏) –∏–∑–º–µ–Ω—è—Ç—å, —Å–æ–±–ª—é–¥–∞—è —É—Å–ª–æ–≤–∏—è –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏—á–Ω–æ–π
# –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU Affero, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –§–æ–Ω–¥–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ
# –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è; –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ü–∏–∏ 3 –õ–∏—Ü–µ–Ω–∑–∏–∏, –ª–∏–±–æ (–Ω–∞ –í–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ) –ª—é–±–æ–π
# —Ä–µ–¥–∞–∫—Ü–∏–∏, –≤—ã–ø—É—â–µ–Ω–Ω–æ–π –ø–æ–∑–∂–µ.
#
# –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ä–∞—Å—á—ë—Ç–µ –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∞ –æ–∫–∞–∂–µ—Ç—Å—è –ø–æ–ª–µ–∑–Ω–æ–π, –Ω–æ
# –ë–ï–ó –ö–ê–ö–ò–•-–õ–ò–ë–û –ì–ê–†–ê–ù–¢–ò–ô, –≤–∫–ª—é—á–∞—è –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –ö–ê–ß–ï–°–¢–í–ê –ª–∏–±–æ
# –ü–†–ò–ì–û–î–ù–û–°–¢–ò –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –¶–ï–õ–ï–ô.
#
# –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏—á–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–µ–π GNU Affero –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ
# –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏—á–Ω–æ–π
# –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU Affero –≤–º–µ—Å—Ç–µ —Å —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π. –ï—Å–ª–∏ –í—ã –µ–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, —Ç–æ
# –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: <https://www.gnu.org/licenses/agpl.html>.

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞. –ó–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ README.

set -o errexit -o pipefail
source api.sh
source database.sh

function process_start_command {
  local chat
  chat=$(jshon -e chat -e id)
  local msg="\
–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–∫–µ—Ä –∏–º–µ–Ω–Ω–æ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ \
–æ–Ω –æ—á–µ–Ω—å –Ω—É–∂–µ–Ω. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ –º–æ—ë –∏–º—è –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, \
–∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏ c–≤–æ–π –∑–∞–ø—Ä–æ—Å."
  local kbd='{"inline_keyboard":[[
    {"text":"‚Ü™Ô∏è –û–ø—Ä–æ–±–æ–≤–∞—Ç—å...","switch_inline_query":""} ]]}'
  tg::emit_call sendMessage text="${msg}" chat_id="${chat}" \
    reply_markup="${kbd}"
}

function process_help_command {
  local chat
  chat=$(jshon -e from -e id)
  local msg="\
–Ø ‚Äì –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫–∞–∫–æ–π —Å—Ç–∏–∫–µ—Ä —Ç–µ–±—è \
–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –µ–≥–æ. –ù–æ –ø–æ–º–Ω–∏, –ø–æ–∫–∞ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ—á–µ–Ω—å –º–∞–ª–æ \
—Å—Ç–∏–∫–µ—Ä–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–º. –ï—Å–ª–∏ —Ç–µ–±—è —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç \
—ç—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤ –ª–∏—á–∫—É —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Å—Ç–∏–∫–µ—Ä—ã, –∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —è –∏—Ö \
–ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä—É—é.
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –∏–∑ —Å–µ–±—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –ü–û, –∏ –º–æ–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö \
GNU/AGPL github.com/mymedia2/steeqbot"
  tg::emit_call sendMessage text="${msg}" chat_id="${chat}"
}

function process_sticker {
  local message user_id file_id
  message=$(cat)
  user_id=$(jshon -e from -e id <<< "${message}")
  file_id=$(jshon -e sticker -e file_id <<< "${message}")
  if jshon -e chat -e type <<< "${message}" | grep -q private; then
    if sql::query "SELECT count(*) FROM history WHERE file_id = ${file_id}" \
        | grep -q 0; then
      if (( RANDOM % 2 )); then
        local msg="–û–≥–æ, –∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!"
      else
        local msg="–û–≥–æ, –∫–∞–∫–æ–π –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∏–∫–µ—Ä!"
      fi
      if (( RANDOM % 2 )); then
        msg+=" –ê —á—Ç–æ –Ω–∞ –Ω—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ?"
      else
        msg+=" –ê —á—Ç–æ —Ç—É—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ?"
      fi
    else
      local msg="–û! –ê —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä —è —É–∂–µ –∑–Ω–∞—é üòÉ"
    fi
    tg::emit_call sendMessage text="${msg}" chat_id="${user_id}" \
      reply_markup='{"force_reply":true}'
    sql::query "INSERT INTO history (user_id, file_id, sendings_tally)
                VALUES (${user_id}, ${file_id}, 0);
                REPLACE INTO states (user_id, file_id)
                VALUES (${user_id}, ${file_id})"
  else
    sql::query "INSERT INTO history (user_id, file_id)
                VALUES (${user_id}, ${file_id})"
  fi
}

function process_inline_query {
  local update query_id user_id pattern stickers_json
  update=$(cat)
  query_id=$(jshon -e id -u <<< "${update}")
  user_id=$(jshon -e from -e id <<< "${update}")
  pattern=$(jshon -e query -u <<< "${update}" | sed 's/"/""/g')
  stickers_json=[$(sql::query "
    WITH r AS (SELECT *, user_id != ${user_id} AS owner_flag, 1 AS category
               FROM history WHERE words LIKE \"%${pattern,,}%\"
               ORDER BY owner_flag DESC, sendings_tally DESC),
         m AS (SELECT *, 0 AS category FROM history
               WHERE file_id NOT IN (SELECT file_id FROM history WHERE words != '')
                 AND $(sql::to_literal <<< "${pattern}") != ''
               ORDER BY sendings_tally DESC
               LIMIT (SELECT count(*) FROM r) / 3)
    SELECT DISTINCT file_id FROM r UNION ALL SELECT DISTINCT file_id FROM m
    LIMIT 50" \
      | sed -E 's/(.{,64}).*/{"type":"sticker","id":"\1","sticker_file_id":"\0"}/
                2~1s/.*/,\0/')]
  tg::emit_call answerInlineQuery inline_query_id="${query_id}" \
    results="${stickers_json}" cache_time=600 is_personal=true
}

function process_chosen_inline_result {
  local result user_id file_id words
  result=$(cat)
  file_id=$(jshon -e result_id <<< "${result}")
  user_id=$(jshon -e from -e id <<< "${result}")
  words=$(jshon -e query -u  <<< "${result}" | sql::to_literal)
  sql::query "INSERT INTO history (user_id, file_id, words)
              VALUES (${user_id}, ${file_id}, ${words,,})"
}

function process_text {
  local query user_id file_id pattern
  query=$(cat)
  jshon -e chat -e type <<< "${query}" | grep -q private || return 0
  user_id=$(jshon -e from -e id <<< "${query}")
  pattern=$(jshon -e text -u <<< "${query}" | sed "s/\"/\"\"/g;s/'/''/g")
  file_id=$(sql::query "
    SELECT file_id FROM history WHERE words LIKE \"%${pattern,,}%\"
    ORDER BY user_id != ${user_id}, sendings_tally DESC LIMIT 1")
  if [ -z "${file_id}" ]; then
    tg::emit_call sendMessage chat_id="${user_id}" \
      text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üòî"
  else
    tg::emit_call sendSticker chat_id="${user_id}" sticker="${file_id}"
  fi
}

function process_reply {
  local data user_id file_id description
  data=$(cat)
  jshon -e chat -e type <<< "${data}" | grep -q private || return 0
  user_id=$(jshon -e from -e id <<< "${data}")
  description=$(jshon -e text <<< "${data}" || true)
  file_id=$(jshon -Q -e reply_to_message -e sticker -e file_id <<< "${data}" \
    || true)
  if [ -n "${description}" ]; then
    local res=true
    if [ -n "${file_id}" ]; then
      sql::query "
        INSERT INTO history (user_id, file_id, words, sendings_tally)
        VALUES (${user_id}, ${file_id}, ${description,,}, 0)"
    else
      sql::query "
        INSERT INTO history (user_id, words, sendings_tally, file_id)
        VALUES (${user_id}, ${description,,}, 0,
        (SELECT file_id FROM states WHERE user_id = ${user_id}))" || res=false
    fi
    if [ "${res}" = true ]; then
      tg::emit_call sendMessage text="–ü–æ–Ω—è—Ç–Ω–æ üôÇ" chat_id="${user_id}"
    fi
  fi
}

valid_updates="message,inline_query,chosen_inline_result"
if [ "$1" = "--set-webhook" ]; then
  tg::initialize_webhook "${valid_updates}" "$2" "$3"
elif [ "${REQUEST_METHOD}" != GET ]; then
  tg::route_update "${valid_updates}" "start,help" "text,sticker,reply"
else
  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  echo -e "Content-Type: text/plain\n"
  echo -n "steeqbot works"
fi
